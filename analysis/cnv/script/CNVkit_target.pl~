#!/usr/bin/perl

=head1 Name

   CNVkit_run.pl -- a script for running CNVkit software

=head1 Version

    Author: baekip 
    Version: 0.1
    Date: 2017-02-10

=head1 Usage

    perl CNVkit_run.pl -p program -i input_file -s sample_id -l log_path -t platform_type -n option -o output_path -c config_file
        -p: program path
        -i: input data file 
        -s: sample id
        -l: log path
        -t: platform type option (wgs, target, amplicon)
        -n: option (individual, somatic)
        -c: config file
        -o: output path

=head1 Example
    
    perl CNVkit_run.pl -c copynumber_config.txt -o target

=cut 

use strict;
use warnings;
use Getopt::Long;
use File::Basename;
use Cwd qw(abs_path);
use lib dirname (abs_path $0) . '/../library';
use Utils qw(checkFile read_config trim make_dir);

my ($program, $input_file, $sample_id, $log_path, $type, $option, $config, $output_path, $help);
GetOptions(
    'program=s' => \$program,
    'input_file=s' => \$input_file,
    'sample_id=s' => \$sample_id,
    'log_path=s' => \$log_path,
    'type=s' => \$type,
    'option=s' => \$option,
    'config=s' => \$config,
    'outptut-s' => \$output_path,
    'help=s' => \$help
);

die `pod2text $0` if (!defined $program || !defined $input_file || !defined $sample_id || !defined $log_path || !defined $output_path ||  $help);

#############################################################
#Requirement unit to config file  
#############################################################
my %info;
read_config ($config, \%info);
my $reference=$info{reference};
my $access_bed=$info{access_bed};
my $refFlat_txt=$info{refFlat_txt};
my $target_bed=$info{target_bed};

#    my $current_bam_path = "$project_path/result/00_SV_run/00_bam_file/$delivery_id";
#    my $output_path = "$cnv_path/$delivery_id";
#    make_dir($current_bam_path);
#    make_dir($output_path);
#    
#    my $current_bam_file = "$current_bam_path/$delivery_id\.bam";
#    my $current_bai_file = "$current_bam_path/$delivery_id\.bai";
#    my $bam_file = "$bam_path/$tbi_id/$tbi_id\.$bam_pattern\.bam";
#    my $bai_file = "$bam_path/$tbi_id/$tbi_id\.$bam_pattern\.bai";
#    checkfile($bam_file);
#    checkfile($bai_file);
#############################################################
#make sh_file (target, wgs, amplicon)
#############################################################
my $sh_file = "$log_path/cnvkit.$sample_id.sh";
my @sh_array;

if ($type eq "target"){
    push @sh_array, "#!/bin/bash" "date" "$program\\", "\tbatch\\" ;
    if ($option eq "individual"){
        push @sh_array, "\t$input_file\\", "\t-n\\", "\t-t $target\\";
    }elsif ($option eq "somatic"){
        my ($control, $case) = split /\_/, $input_file;
        push @sh_array, "\t$control\\", "\t-n $case\\", "\t-t $target\\";
    }else {
        die "ERROR: Check your config file <$option> !!!\n";
    }
}elsif ($type eq "amplicon"){
    push @sh_array, "\t-m amplicon";
    if ($option eq "individual"){
        push @sh_array, "\t$input_file\\", "\t-m amplicon", "\t-t $target\\";
    }elsif ($option eq "somatic"){
        my ($control, $case) = split /\_/, $input_file;
        push @sh_array, "\t$control\\", "\t-n $case\\", "\t-t $target\\";
    }else {
        die "ERROR: Check your config file <$option> !!!\n";
    }
}elsif ($type eq "wgs"){
    push @sh_array, "\t-m wgs\\";
    if ($option eq "individual"){
        push @sh_array, "\t$input_file\\", "\t-n\\";
    }elsif ($option eq "somatic"){
        my ($control,$case) = split /\_/, $input_file;
        push @sh_array, "\t$control\\", "\t-n$case\\";
    }else {
        die "ERROR: Check your config file <$option> !!!\n";
    }
}else {
    die "ERROR: Check your config file <$type> !!! \n";
}

push @sh_array, "\t-f $reference\\", "\t--annotate $refFlat_txt\\", "\t--access $accees_bed\\";
push @sh_array, "\t-output_reference\\", "\t--output_reference $output/$input_file.cnn\\";
push @sh_array, "\t-d $output\n", "date\n\n";

open my $fh_sh, '>', $sh_file or die;
foreach my $cmd (@sh_array){
    print $fh_sh "$cmd";
}
close $fh_sh;
print $fh_sh;

#####2. copynumber call
#date
#$cnvkit call \\
#    $output_path/$delivery_id\.cns \\
#    -m threshold \\
#    -t=-1.1,-0.4,0.3,0.7 \\
#    -o $output_path/$delivery_id\.call.cns
#date\n\n";
#
#    ####3. output figure file 
#    print "process: scatter pdf and png file\n";
#    print $sh_fh "echo \"scatter pnf and png file\"
#date
#$cnvkit scatter \\
#    $output_path/$delivery_id\.cnr \\
#    -s $output_path/$delivery_id\.cns \\
#    -o $output_path/$delivery_id-scatter.pdf
#
#$cnvkit diagram \\
#    $output_path/$delivery_id\.cnr \\
#    -s $output_path/$delivery_id\.cns \\
#    -o $output_path/$delivery_id-diagram.pdf\n
#
#    -quality 90 \\
#    $output_path/$delivery_id\-diagram.png
#
#convert -density 150 \
#    $output_path/$delivery_id\-scatter.pdf \\
#    -quality 90 \\
#    $output_path/$delivery_id\-scatter.png
#date\n\n";
#close ($sh_fh);
    
    my $cmd_cnv_fh = "qsub -V -e $cnv_sh_path -o $cnv_sh_path -S /bin/bash $cnv_sh";
    print "qsub command: $cmd_cnv_fh\n";
    system ($cmd_cnv_fh);
}
